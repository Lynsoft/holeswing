name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

jobs:
  quality-check:
    name: Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run quality checks
        run: pnpm run quality

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: quality-check
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          # Extract changelog for this version
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          if [ -f CHANGELOG.md ]; then
            # Get content between this version and previous version
            awk "/^## \[?${VERSION#v}/ {flag=1; next} /^## / && flag {exit} flag" CHANGELOG.md > release_notes.md
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
            cat release_notes.md >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "RELEASE_NOTES=Release $VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [quality-check, release]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Expo CLI
        run: npm install -g @expo/cli

      - name: Build for web
        run: npx expo export --platform web

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build-${{ github.ref_name }}
          path: dist/
          retention-days: 30

      - name: Deploy to GitHub Pages (optional)
        if: github.repository_owner == github.actor && !contains(github.ref_name, '-')
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist

  manual-release:
    name: Manual Release
    runs-on: ubuntu-latest
    needs: quality-check
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Run release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          case "${{ github.event.inputs.release_type }}" in
            "patch")
              pnpm run release:patch
              ;;
            "minor")
              pnpm run release:minor
              ;;
            "major")
              pnpm run release:major
              ;;
            "prerelease")
              pnpm run release:alpha
              ;;
            *)
              pnpm run release
              ;;
          esac
